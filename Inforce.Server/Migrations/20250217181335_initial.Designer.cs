// <auto-generated />
using System;
using Inforce.Server.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inforce.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250217181335_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Inforce.Server.Domain.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The URL shortening algorithm works by generating a unique short code for each original URL. When a user submits a URL to be shortened, the system checks if the URL already exists in the database. If it does, the existing short code is returned. If not, a new short code is generated using a combination of alphanumeric characters. This short code is then stored in the database along with the original URL. When a user accesses the short URL, the system retrieves the original URL from the database and redirects the user to it."
                        });
                });

            modelBuilder.Entity("Inforce.Server.Domain.ShortenedUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShortCode")
                        .IsUnique();

                    b.ToTable("Urls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            OriginalUrl = "https://www.google.com",
                            ShortCode = "ggl123"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 2, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "testuser",
                            OriginalUrl = "https://www.github.com",
                            ShortCode = "ghb456"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 3, 18, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            OriginalUrl = "https://www.microsoft.com",
                            ShortCode = "ms789"
                        });
                });

            modelBuilder.Entity("Inforce.Server.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "$2a$11$X9OtbQvxRZCzqM3JmXZ.VuI5chhmf1IuVVklEoXx0xdFk7QheODW2",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = "$2a$11$0iI2gMjN9SOE3KNZ9H25yep5xRhn3LU.y2KP6eIt7n09YOL6MC1Ty",
                            Role = "User",
                            Username = "testuser"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
